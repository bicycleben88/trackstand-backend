"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  bikeRide: BikeRide
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  bikeRide: BikeRideWhereInput
  bikeRide_is_null: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  bikeRide: BikeRideRelateToOneInput
}

input BikeRideRelateToOneInput {
  create: BikeRideCreateInput
  connect: BikeRideWhereUniqueInput
  disconnect: BikeRideWhereUniqueInput
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  bikeRide: BikeRideRelateToOneInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type BikeRide {
  id: ID!
  date: String
  miles: Int
  hours: Int
  minutes: Int
  user: User
}

input BikeRideWhereInput {
  AND: [BikeRideWhereInput!]
  OR: [BikeRideWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: String
  date_not: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  date_i: String
  date_not_i: String
  date_contains_i: String
  date_not_contains_i: String
  date_starts_with_i: String
  date_not_starts_with_i: String
  date_ends_with_i: String
  date_not_ends_with_i: String
  date_in: [String]
  date_not_in: [String]
  miles: Int
  miles_not: Int
  miles_lt: Int
  miles_lte: Int
  miles_gt: Int
  miles_gte: Int
  miles_in: [Int]
  miles_not_in: [Int]
  hours: Int
  hours_not: Int
  hours_lt: Int
  hours_lte: Int
  hours_gt: Int
  hours_gte: Int
  hours_in: [Int]
  hours_not_in: [Int]
  minutes: Int
  minutes_not: Int
  minutes_lt: Int
  minutes_lte: Int
  minutes_gt: Int
  minutes_gte: Int
  minutes_in: [Int]
  minutes_not_in: [Int]
  user: UserWhereInput
  user_is_null: Boolean
}

input BikeRideWhereUniqueInput {
  id: ID
}

enum SortBikeRidesBy {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  miles_ASC
  miles_DESC
  hours_ASC
  hours_DESC
  minutes_ASC
  minutes_DESC
}

input BikeRideOrderByInput {
  id: OrderDirection
  date: OrderDirection
  miles: OrderDirection
  hours: OrderDirection
  minutes: OrderDirection
}

input BikeRideUpdateInput {
  date: String
  miles: Int
  hours: Int
  minutes: Int
  user: UserRelateToOneInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input BikeRidesUpdateInput {
  id: ID!
  data: BikeRideUpdateInput
}

input BikeRideCreateInput {
  date: String
  miles: Int
  hours: Int
  minutes: Int
  user: UserRelateToOneInput
}

input BikeRidesCreateInput {
  data: BikeRideCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single BikeRide item.
  """
  createBikeRide(data: BikeRideCreateInput): BikeRide

  """
   Create multiple BikeRide items.
  """
  createBikeRides(data: [BikeRidesCreateInput]): [BikeRide]

  """
   Update a single BikeRide item by ID.
  """
  updateBikeRide(id: ID!, data: BikeRideUpdateInput): BikeRide

  """
   Update multiple BikeRide items by ID.
  """
  updateBikeRides(data: [BikeRidesUpdateInput]): [BikeRide]

  """
   Delete a single BikeRide item by ID.
  """
  deleteBikeRide(id: ID!): BikeRide

  """
   Delete multiple BikeRide items by ID.
  """
  deleteBikeRides(ids: [ID!]): [BikeRide]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all BikeRide items which match the where clause.
  """
  allBikeRides(
    where: BikeRideWhereInput! = {}
    search: String
    sortBy: [SortBikeRidesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [BikeRideOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [BikeRide!]

  """
   Search for the BikeRide item with the matching ID.
  """
  BikeRide(where: BikeRideWhereUniqueInput!): BikeRide

  """
   Perform a meta-query on all BikeRide items which match the where clause.
  """
  _allBikeRidesMeta(
    where: BikeRideWhereInput! = {}
    search: String
    sortBy: [SortBikeRidesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [BikeRideOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use bikeRidesCount instead."
    )
  bikeRidesCount(where: BikeRideWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
